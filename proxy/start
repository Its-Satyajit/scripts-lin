#!/bin/sh

# Set up SSH tunnel
ssh -D 1337 -C -N hostinger_1 &

# Set up redsocks
sudo systemctl start redsocks

# Create new chain if it doesn't exist
sudo iptables -t nat -L REDSOCKS > /dev/null || sudo iptables -t nat -N REDSOCKS

# Ignore reserved and local networks
sudo iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 100.64.0.0/10 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 198.18.0.0/15 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
sudo iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN

# Redirect traffic to redsocks
sudo iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 1338

# Apply the REDSOCKS chain to all traffic
sudo iptables -t nat -A PREROUTING -p tcp -j REDSOCKS
sudo iptables -t nat -A OUTPUT -p tcp -j REDSOCKS

# Allow redsocks traffic
sudo iptables -A INPUT -p tcp --dport 1338 -j ACCEPT